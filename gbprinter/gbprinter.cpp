/**
 * @file gbprinter.cpp
 * @author Jason Bradley Carpenter (brad@identex.co)
 * @brief Gameboy Printer Test
 * @version 0.1
 * @date 2023-01-01
 * 
 * @copyright Copyright (c) 2023
 * 
 * @note Work In Progress - Status is fully functional and able to print, but cannot yet accept serial input to load images from the computer
 */

#include <stdio.h>
#include <string>
#include <strings.h>
#include "pico/stdlib.h"
#include "pico/stdio/driver.h"
#include "pico/time.h"
#include "pico/binary_info.h"
#include "hardware/spi.h"

#define DEBUG true

#define PICO_STDIO_USB_CONNECT_WAIT_TIMEOUT_MS   -1

#define PRINTER_CLOCK_SPEED 8192
// Port 1
#define GB_PRINTER_SPI spi0
#define GB_PRINTER_RX_PIN 0
#define GB_PRINTER_CS_PIN 1
#define GB_PRINTER_CLK_PIN 2
#define GB_PRINTER_TX_PIN 3
// Port 2
// #define GB_PRINTER_SPI spi1
// #define GB_PRINTER_RX_PIN 12
// #define GB_PRINTER_CS_PIN 13
// #define GB_PRINTER_CLK_PIN 14
// #define GB_PRINTER_TX_PIN 15

#define MAGIC_BYTE_1 0x88
#define MAGIC_BYTE_2 0x33

#define DATA_NUM_ROWS 12
#define DATA_NUM_BYTES 640
uint8_t rows[DATA_NUM_ROWS][DATA_NUM_BYTES] = {
    {
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,6,255,0,0,0,0,0,0,0,0,0,0,0,0,233,64,255,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,85,111,255,0,0,0,0,0,0,0,0,0,0,0,0,64,0,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,7,0,31,0,63,0,127,0,255,31,255,191,255,255,254,255,234,254,170,250,170,234,170,234,170,255,254,255,255,175,255,170,191,170,175,170,171,170,170,170,170,0,0,128,0,244,1,252,47,255,255,255,255,255,255,191,254,0,111,27,255,255,255,255,255,255,249,254,64,228,0,0,0,255,255,255,255,255,255,233,65,0,0,0,0,0,0,0,0,253,0,255,64,255,192,255,208,63,240,31,244,11,248,7,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    },
    {
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,3,0,7,2,255,15,255,63,255,191,255,255,229,255,128,255,0,253,0,255,233,255,255,255,255,255,255,1,107,0,0,0,0,0,0,64,0,249,0,255,228,255,255,255,255,111,255,1,191,0,6,0,0,0,0,0,0,144,0,254,91,255,255,255,255,255,255,0,0,0,0,0,90,107,255,255,255,255,255,255,255,254,148,0,0,5,171,255,255,255,255,255,255,255,254,165,64,0,0,6,255,255,254,255,254,255,250,255,250,175,250,47,234,63,234,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,171,255,191,255,175,248,175,252,171,253,171,255,170,255,170,255,234,255,255,255,0,0,0,0,0,0,0,0,64,0,128,0,249,64,255,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,253,2,254,1,255,0,255,0,255,0,191,0,127,106,255,0,0,0,0,0,0,64,0,64,0,128,0,128,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,15,0,31,0,47,0,47,0,63,0,63,0,63,252,0,248,0,244,0,240,0,224,0,224,0,224,0,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,254,6,144,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,234,191,234,191,170,191,170,255,170,255,170,255,170,255,170,170,170,170,170,170,170,170,171,170,171,170,170,170,170,170,170,255,255,255,170,254,170,254,171,254,175,254,175,255,191,255,255,255,255,255,255,255,250,255,170,254,170,250,170,234,170,234,170,255,254,255,255,170,255,170,175,170,171,170,170,170,170,170,170,1,175,239,255,255,255,255,255,255,234,255,170,255,170,191,170,255,255,255,255,255,255,234,191,170,170,170,170,170,170,170,170,208,0,248,0,255,0,255,192,255,224,175,244,175,248,171,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    },
    {
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,0,63,0,63,0,63,0,63,0,47,0,47,0,31,208,0,208,0,208,0,208,0,224,0,224,0,240,0,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,170,191,170,127,234,63,234,47,250,31,254,11,255,2,255,170,170,170,170,170,170,170,170,170,170,170,170,170,170,255,255,191,255,175,255,170,255,170,191,170,191,170,255,191,255,255,255,234,170,170,170,170,170,170,170,234,170,234,170,234,170,250,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,171,191,234,191,250,191,255,191,255,191,255,255,175,255,175,254,175,170,170,170,170,170,170,170,170,234,170,234,170,234,170,234,170,171,253,170,253,170,253,170,253,170,253,171,253,171,252,171,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,15,0,11,0,7,0,3,0,2,0,1,0,0,248,16,253,184,255,253,255,252,255,248,255,240,255,224,255,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,0,47,0,2,0,0,0,0,0,0,0,0,0,0,255,255,255,255,191,254,5,80,0,0,0,0,0,0,0,0,255,239,253,7,144,1,0,0,0,0,0,0,0,0,0,0,254,170,255,170,255,250,127,255,27,255,1,191,0,6,0,0,170,175,170,191,171,255,255,255,255,254,255,250,175,250,11,254,254,175,255,255,255,255,255,254,170,170,170,170,170,170,170,170,234,170,234,170,170,170,170,170,170,170,170,171,170,175,170,191,175,248,175,244,191,224,191,208,255,128,255,64,255,192,255,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    },
    {
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,7,0,11,0,15,0,31,0,47,0,63,255,64,255,0,254,0,252,0,248,0,244,0,240,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,255,1,255,0,127,0,31,0,7,0,0,0,0,0,0,170,170,234,170,250,170,255,255,255,255,191,255,27,255,0,20,170,255,171,255,191,254,255,248,255,208,254,64,164,0,0,0,255,224,159,240,15,244,11,248,7,252,3,253,2,254,1,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,0,127,0,191,0,191,0,255,1,255,1,255,1,255,208,0,208,0,192,0,128,0,128,0,64,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,127,1,255,0,255,0,191,0,191,1,255,107,255,255,255,255,255,0,0,64,0,64,0,129,85,255,255,255,255,255,255,249,85,0,0,0,0,0,0,85,0,255,208,255,240,255,224,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    },
    {
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,255,1,255,2,255,2,255,1,255,1,255,1,255,1,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,64,31,244,127,253,191,254,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,0,26,0,0,0,0,0,0,0,0,0,0,0,0,254,255,64,127,0,127,0,127,0,127,0,127,0,127,0,127,192,0,192,0,192,0,192,0,192,0,192,0,192,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,1,0,0,0,0,0,0,0,90,27,255,255,255,255,254,169,64,0,0,0,0,22,255,255,255,255,255,255,255,165,191,0,127,0,63,0,47,255,169,255,255,255,255,234,149,192,0,208,0,208,0,224,0,0,0,64,0,64,0,0,0,0,0,0,0,0,0,0,0,0,1,0,3,0,7,0,11,0,11,0,11,0,11,0,11,255,128,255,224,255,240,255,244,255,248,255,248,255,248,255,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,191,255,127,253,47,248,6,144,0,0,64,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,191,191,255,255,255,191,255,6,255,2,255,3,254,7,253,208,0,250,148,255,255,255,255,234,255,64,0,0,0,0,0,0,0,0,0,228,0,253,0,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    },
    {
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,31,0,11,0,7,0,3,0,7,0,191,27,255,240,0,248,0,252,0,254,22,255,255,255,255,255,249,255,224,0,0,0,0,0,0,144,0,240,0,208,0,0,0,0,0,0,7,0,1,0,0,0,0,0,0,0,0,0,0,0,0,255,240,255,208,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,2,255,7,249,15,208,15,213,15,209,11,245,3,255,255,128,255,240,91,248,1,253,85,253,81,252,87,248,255,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,255,2,255,1,255,0,31,11,253,15,248,31,244,63,240,255,224,255,244,255,254,255,255,0,0,0,0,0,0,0,0,0,0,0,0,64,0,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,255,255,229,101,0,0,0,0,0,0,0,0,0,0,0,255,240,111,248,15,253,7,255,2,255,0,191,0,63,0,15,0,0,0,0,0,0,64,1,208,111,250,255,255,255,255,248,0,0,0,0,0,0,0,0,192,0,192,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,0,5,0,0,0,0,0,0,0,0,0,0,0,0,255,128,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,11,0,47,0,127,0,255,1,255,1,255,26,159,255,255,255,255,255,255,250,191,208,27,64,3,0,0,255,255,253,111,248,1,255,229,255,255,255,255,255,255,85,107,255,144,255,248,255,254,27,255,208,105,249,0,255,64,255,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    },
    {
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,15,0,47,0,15,0,127,6,255,31,254,191,244,255,144,253,0,228,0,255,240,255,253,255,255,75,255,1,255,0,47,0,6,0,0,0,0,0,0,144,0,249,0,255,144,255,254,255,255,111,255,0,0,0,0,0,0,0,0,0,0,64,0,249,64,255,250,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,91,107,255,0,0,0,0,0,0,0,6,0,111,91,255,255,255,255,255,2,254,3,254,47,255,255,254,255,254,255,255,254,255,144,191,0,0,0,0,0,0,0,0,0,0,0,0,128,0,208,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,240,47,248,11,253,3,254,2,255,0,255,0,255,0,191,0,0,0,0,0,0,0,0,0,0,64,0,64,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,0,41,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,111,2,255,31,255,191,255,6,255,2,255,111,255,255,255,255,254,255,144,249,0,128,0,255,255,255,255,255,255,255,255,151,255,11,254,31,254,63,250,254,165,255,255,255,255,255,255,171,255,170,171,170,171,170,171,80,0,255,234,255,255,255,255,255,255,249,106,248,0,253,0,0,0,170,170,255,255,255,255,255,255,170,170,0,0,0,0,0,0,170,255,255,255,255,255,255,255,170,165,0,0,0,0,86,175,255,255,255,255,255,255,255,255,80,63,0,127,0,191,255,255,255,255,255,255,255,171,234,170,234,170,170,170,170,170,255,249,254,64,253,0,255,64,255,128,255,224,191,244,175,248,0,63,0,31,0,11,0,3,0,1,0,0,0,0,0,0,244,0,252,0,254,0,255,64,255,192,127,224,47,244,15,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,0,191,0,255,1,255,2,255,3,254,11,253,31,248,128,0,128,0,64,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    },
    {
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,7,0,31,0,191,2,255,11,255,31,255,127,251,255,209,255,249,255,208,254,0,244,0,248,0,255,64,255,208,255,248,0,0,0,1,0,3,0,7,0,15,0,31,0,63,0,127,191,234,255,234,255,170,254,170,254,170,250,170,250,170,234,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,254,0,255,128,191,208,175,248,171,255,170,255,170,191,170,171,0,0,0,0,0,0,0,0,64,0,249,0,255,234,255,255,0,0,0,0,0,0,0,0,0,6,1,111,175,255,255,255,1,255,3,254,15,254,127,250,255,234,255,170,254,170,234,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,171,253,171,255,170,255,170,255,170,191,170,175,170,175,170,171,0,0,0,0,128,0,208,0,224,0,244,0,248,0,253,0,7,254,2,255,0,255,0,127,0,47,0,15,0,7,0,2,0,0,64,0,192,2,224,31,244,127,254,255,255,255,255,254,63,244,191,224,255,128,255,0,253,0,244,0,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,11,0,31,0,47,0,127,0,191,0,255,1,255,255,128,254,0,252,0,244,0,224,0,192,0,128,0,64,0,47,254,11,255,1,255,0,127,0,11,0,2,0,0,0,0,0,191,209,255,250,255,255,254,255,254,255,254,127,250,47,250,234,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,191,255,170,191,170,170,170,170,170,170,170,170,170,170,170,170,255,254,254,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,171,170,170,170,170,170,170,170,170,170,170,170,170,170,170,254,0,255,0,255,64,255,192,191,214,191,255,175,255,175,255,0,7,0,111,6,255,111,255,255,255,255,244,255,128,248,0,255,248,255,208,254,0,228,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    },
    {
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,255,2,254,2,254,2,254,2,254,1,255,1,255,0,255,0,0,0,0,0,0,0,0,0,0,0,0,64,0,192,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,2,47,234,63,234,127,234,191,234,255,170,255,170,255,170,255,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,175,255,171,253,171,253,171,254,170,254,170,255,170,255,170,255,64,0,0,0,0,0,0,0,0,0,0,0,64,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,0,47,0,31,0,7,0,1,0,0,0,0,0,0,224,0,248,0,255,64,255,249,255,255,47,255,6,255,0,107,0,2,0,3,0,7,85,175,255,255,255,255,255,255,255,175,254,170,254,170,254,170,254,170,254,170,254,170,250,170,250,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,255,170,191,170,191,170,191,170,191,170,191,170,191,170,175,128,0,192,0,192,0,208,0,208,0,208,0,224,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    },
    {

    },
    {
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,11,0,7,0,7,0,3,0,2,0,1,0,0,248,0,248,0,252,0,253,0,254,0,255,0,255,64,191,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,31,0,15,0,15,0,15,0,15,0,31,0,31,240,0,240,0,240,0,240,0,240,0,240,0,244,0,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,47,0,63,0,127,0,191,0,255,2,255,7,254,224,0,208,0,208,0,192,0,128,0,128,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,224,47,248,15,255,7,255,1,255,0,111,0,6,0,0,0,0,0,0,64,0,249,64,255,250,255,255,255,255,107,255,0,0,0,0,0,0,0,0,149,85,255,255,255,255,255,255,0,0,0,0,0,0,0,0,85,106,255,255,255,255,255,255,0,47,0,127,1,255,27,255,255,254,255,248,255,208,249,0,248,0,253,0,255,64,255,245,191,255,47,255,6,255,0,111,0,0,0,0,0,0,0,0,234,85,255,255,255,255,255,255,0,0,0,0,0,0,0,0,85,170,255,255,255,255,255,255,0,0,0,0,0,6,5,175,191,255,255,255,255,255,255,164,15,253,127,248,255,224,255,192,254,0,248,0,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    },
    {
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    },
};

static void printbuf(uint8_t buf[], size_t len) {
    int i;
    for (i = 0; i < len; ++i) {
        if (i % 16 == 15)
            printf("%02x\n", buf[i]);
        else
            printf("%02x ", buf[i]);
    }

    // append trailing newline if there isn't one
    if (i % 16) {
        putchar('\n');
    }
}

enum gbp_command_t
{
    INIT = 0x01,
    PRINT = 0X02,
    DATA = 0X04,
    DETECT = 0x0F,
    STATUS = 0x0F,
};

enum gbp_compression_flag_t
{
    UNCOMPRESSED = 0x00,
    COMPRESSED = 0x01,
};

enum gbp_status_t
{
    LOW_BATTERY = 0b10000000,
    OTHER_ERR = 0b01000000,
    PAPER_JAM = 0b00100000,
    PACKET_ERROR = 0b00010000,
    UNPROCESSED = 0b00001000,
    FULL = 0b00000100,
    BUSY = 0b00000010,
    CHECKSUM_ERROR = 0b00000001
};

typedef struct gbp_printer_status_t
{
  bool low_battery;
  bool other_error;
  bool paper_jam;
  bool packet_error;
  bool unprocessed_data;
  bool buffer_full;
  bool printer_busy;
  bool checksum_error;
} gbp_printer_status_t;

struct u8Nibble {
    bool lsb_first = true;
    uint8_t LSB = 0x0;
    uint8_t MSB = 0x0;

    u8Nibble() {}
    u8Nibble(uint8_t LSB_in, uint8_t MSB_in) {
        LSB = LSB_in;
        MSB = MSB_in;
    }
    explicit u8Nibble(uint8_t whole) {
        uint8_t high = (whole & 0xF0) >> 4;
        uint8_t low = (whole & 0x0F);
        LSB = lsb_first ? high : low;
        MSB = lsb_first ? low : high;
    }
    explicit operator uint8_t() {
        uint8_t high = (lsb_first ? LSB : MSB) << 4;
        uint8_t low = lsb_first ? MSB : LSB;
        return high | low;
    }
};

template <size_t DATA_LEN>
struct gbp_packet_t {
    uint8_t magic_byte_1 = MAGIC_BYTE_1;
    uint8_t magic_byte_2 = MAGIC_BYTE_2;

    gbp_command_t command = gbp_command_t::DATA;
    gbp_compression_flag_t compression = gbp_compression_flag_t::UNCOMPRESSED;
    uint16_t data_length = DATA_LEN;
    uint8_t data[DATA_LEN];
    uint16_t checksum = 0x0000;
    uint8_t alive_indicator = 0x00;
    uint8_t status = 0x00;

    gbp_packet_t() {}
    gbp_packet_t(
        gbp_command_t command_in,
        uint8_t data_in[DATA_LEN],
        gbp_compression_flag_t compression_in = gbp_compression_flag_t::UNCOMPRESSED
    ) {
        command = command_in;
        compression = compression_in;

        uint16_t sum_of_data = 0;
        for (size_t d = 0; d < DATA_LEN; d++) {
            data[d] = data_in[d];
            sum_of_data += data_in[d];
        }

        checksum = command + compression + data_length + sum_of_data;
    }
};

struct gbp_response_packet_t {
    uint8_t alive_indicator = 0x00;
    gbp_printer_status_t status = { false, false, false, false, false, false, false, false, };

    gbp_response_packet_t() {}
    gbp_response_packet_t(uint8_t *data_in, size_t data_len) {
        alive_indicator = data_in[data_len - 2];
        status = status_byte(data_in[data_len - 1]);
    }

    gbp_printer_status_t status_byte(uint8_t b)
    {
        return {
            (b & 0b10000000) == 0b10000000,
            (b & 0b01000000) == 0b01000000,
            (b & 0b00100000) == 0b00100000,
            (b & 0b00010000) == 0b00010000,
            (b & 0b00001000) == 0b00001000,
            (b & 0b00000100) == 0b00000100,
            (b & 0b00000010) == 0b00000010,
            (b & 0b00000001) == 0b00000001,
        };
    }

    void debug_status() {
        printf("Printer Status --------------------\n");
        printf("Buffer Full: %s \n", status.buffer_full ? "true" : "false");
        printf("Checksum Err: %s \n", status.checksum_error ? "true" : "false");
        printf("Low Battery: %s \n", status.low_battery ? "true" : "false");
        printf("Other Err: %s \n", status.other_error ? "true" : "false");
        printf("Packet Err: %s \n", status.packet_error ? "true" : "false");
        printf("Paper Jam: %s \n", status.paper_jam ? "true" : "false");
        printf("Printer Busy: %s \n", status.printer_busy ? "true" : "false");
        printf("Unprocessed Data: %s \n", status.unprocessed_data ? "true" : "false");
        return;
    }
};

template <size_t DATA_LEN>
struct PacketWrapper {
    gbp_packet_t<DATA_LEN> packet;
    gbp_response_packet_t response;

    void send_packet() {
        size_t packet_size = 10 + DATA_LEN;

        // Build packet
        uint8_t packet_data[packet_size] = {
            packet.magic_byte_1,
            packet.magic_byte_2,
            packet.command,
            packet.compression,
            (uint8_t)(packet.data_length & 0x00FF),
            (uint8_t)(packet.data_length >> 8),
        };
        // Fill in data
        for (size_t i = 0; i < DATA_LEN; i++) {
            packet_data[i + 6] = packet.data[i];
        }
        // Checksum the values
        uint16_t checksum = 0;
        for (size_t i = 2; i < DATA_LEN + 6; i++) {
            checksum += packet_data[i];
        }
        packet_data[6 + DATA_LEN] = (uint8_t)(checksum & 0x00FF);
        packet_data[6 + DATA_LEN + 1] = (uint8_t)((checksum) >> 8);
        // Remaining packet
        packet_data[6 + DATA_LEN + 2] = packet.alive_indicator;
        packet_data[6 + DATA_LEN + 3] = packet.status;

        uint8_t result[2];
        for (size_t i = 0; i < packet_size; i++) {
            // Send data
            uint8_t dataPayload[1] = { packet_data[i] };
            uint8_t response[1];
            spi_write_read_blocking(GB_PRINTER_SPI, dataPayload, response, 1);

            if (i == packet_size - 2) {
                result[0] = response[0];
            } else if (i == packet_size - 1) {
                result[1] = response[0];
            }
        }

        response = gbp_response_packet_t(result, 2);
#if DEBUG
        response.debug_status();
#endif
        return;
    }
};

struct InitPacket : PacketWrapper<0> {
    InitPacket() {
        packet = gbp_packet_t<0>(gbp_command_t::INIT, {}, gbp_compression_flag_t::UNCOMPRESSED);
    }
};

template <size_t DATA_LEN>
struct DataPacket : public PacketWrapper<DATA_LEN> {
    DataPacket<DATA_LEN>(uint8_t data_in[DATA_LEN]) {
        this->packet = gbp_packet_t<DATA_LEN>(gbp_command_t::DATA, data_in, gbp_compression_flag_t::UNCOMPRESSED);
    }
};

struct PrintPacket : PacketWrapper<4> {
    uint8_t number_of_sheets = 0x01;
    u8Nibble margins = u8Nibble(0x0, 0x0);
    uint8_t palette = 0xE4;
    uint8_t exposure_time = 0x7F;
    
    PrintPacket() {
        uint8_t data[4] = { number_of_sheets, (uint8_t) margins, palette, exposure_time };
        packet = gbp_packet_t<4>(gbp_command_t::PRINT, data, gbp_compression_flag_t::UNCOMPRESSED);
    }
};

struct StatusPacket : PacketWrapper<0> {
    StatusPacket() {
        packet = gbp_packet_t<0>(gbp_command_t::STATUS, {}, gbp_compression_flag_t::UNCOMPRESSED);
    }
};

struct DetectPacket : PacketWrapper<0> {
    DetectPacket() {
        packet = gbp_packet_t<0>(gbp_command_t::DETECT, {}, gbp_compression_flag_t::UNCOMPRESSED);
    }
};

static bool print_routine() {
    // The printer needs an empty data packet after the data is sent but before you print
    // Data Packet - Contains the tile data
    printf("Empty data packet...\n");
    DataPacket<0> empty_data_packet = DataPacket<0>({});
    empty_data_packet.send_packet();
    if (empty_data_packet.response.alive_indicator != 0x81) {
        printf("Printer did not respond with an alive indicator\n");
        return false;
    }

    // Finally, before continuing the loop, 
    printf("Print packet...\n");
    PrintPacket print_packet = PrintPacket();
    print_packet.send_packet();
    if (print_packet.response.alive_indicator != 0x81) {
        printf("Printer did not respond with an alive indicator\n");
        return false;
    }

    bool is_printing = true;
    while (is_printing) {
        sleep_ms(500);
        StatusPacket status_packet = StatusPacket();
        status_packet.send_packet();
        if (status_packet.response.alive_indicator != 0x81) {
            printf("Printer did not respond with an alive indicator\n");
            return 1;
        }
        if (!status_packet.response.status.printer_busy) {
            is_printing = false;
        }
    }

    return true;
}

int main() {
#if DEBUG
    // Enable UART so we can print via USB Serial
    stdio_init_all();

    printf("Loading Debug Outputs: USB Serial Print Statements, 8-bit Shifter for LEDs\n");
#endif

    printf("Starting GB Printer Master...\n");

    // Enable GPIO pins for SPI
    // Some are not neccessary due to `gpio_set_function`, but the CS pin must be set to force low
    gpio_init(GB_PRINTER_CS_PIN);
    gpio_init(GB_PRINTER_RX_PIN);
    gpio_init(GB_PRINTER_CLK_PIN);
    gpio_init(GB_PRINTER_TX_PIN);
    // Chip Select force low		
	gpio_set_dir(GB_PRINTER_CS_PIN,true);  // output
	gpio_put(GB_PRINTER_CS_PIN,false);     // Always low

    spi_init(GB_PRINTER_SPI, PRINTER_CLOCK_SPEED);
    spi_set_format(GB_PRINTER_SPI, 8, SPI_CPOL_0, SPI_CPHA_0, SPI_LSB_FIRST);
    gpio_set_function(GB_PRINTER_RX_PIN, GPIO_FUNC_SPI);
    gpio_set_function(GB_PRINTER_CLK_PIN, GPIO_FUNC_SPI);
    gpio_set_function(GB_PRINTER_TX_PIN, GPIO_FUNC_SPI);
    gpio_set_function(GB_PRINTER_CS_PIN, GPIO_FUNC_SPI);

    printf("Baud Rate: %u\n", spi_get_baudrate(GB_PRINTER_SPI));

    // Detect Packet - Check if the printer is connected
    printf("Detecting Printer...\n");
    DetectPacket detect_packet = DetectPacket();
    detect_packet.send_packet();
    if (detect_packet.response.alive_indicator != 0x81) {
        printf("Printer did not respond with an alive indicator\n");
        return 1;
    }

    // Init Packet - Tell the printer to clear it's RAM to start a new print
    printf("Init packet...\n");
    InitPacket init_packet = InitPacket();
    init_packet.send_packet();
    if (init_packet.response.alive_indicator != 0x81) {
        printf("Printer did not respond with an alive indicator\n");
        return 1;
    }

    // Status Packet - Make sure the printer is alive
    // You can use `status_packet.response.status` to see if the printer has:
    //  - Low Battery
    //  - Paper Jam
    //  - Unprocessed Data (meaning the printer is ready to print but can take more data; can be cleared via Init or Print)
    //  - Full Buffer (meaning the printer is ready to print but cannot take more data; can be cleared via Init or Print)
    //  - Busy status (printing)
    //  - Checksum Error
    //  - Packet Error
    //  - Other/Unknown Error
    printf("Status packet...\n");
    StatusPacket status_packet = StatusPacket();
    status_packet.send_packet();
    if (status_packet.response.alive_indicator != 0x81) {
        printf("Printer did not respond with an alive indicator\n");
        return 1;
    }

    for (size_t i = 0; i < DATA_NUM_ROWS; i++) {

        // Data Packet - Contains the tile data
        printf("Data packet %x...\n", i);
        DataPacket<DATA_NUM_BYTES> data_packet = DataPacket<DATA_NUM_BYTES>(rows[i]);
        data_packet.send_packet();
        if (data_packet.response.alive_indicator != 0x81) {
            printf("Printer did not respond with an alive indicator\n");
            return 1;
        }

        // Print routine
        if (
            // The buffer can only accept 9 bands of 640 byte data
            // Since the printer can accept at most 640 bytes of data, this is hardcoded to print every 9 rows
            // If you have less than 640 bytes of data then it'll just print more often
            ((i + 1) % 9 == 0 && i != 0)
            // Or print on the last packet
            || i + 1 == DATA_NUM_ROWS
        ) {
            if (!print_routine()) {
                printf("An error occurred while running the print routine after packet #%s\n", i);
                return 1;
            }
        }
    }

    printf("It's a-done! Goodbye.");
}